######## Helper functions for setting up Apptainer images for viash ########

# ViashApptainerInstallationCheck: check whether Apptainer is installed correctly
#
# examples:
#   ViashApptainerInstallationCheck
function ViashApptainerInstallationCheck {
  ViashDebug "Checking whether Apptainer is installed"
  if ! command -v apptainer &> /dev/null; then
    ViashCritical "Apptainer (singularity) doesn't seem to be installed. See 'https://apptainer.org/docs/user/main/quick_start.html#install-apptainer' for instructions."
    exit 1
  fi

  ViashDebug "Checking Apptainer version"
  local save=$-; set +e
  apptainer --version > /dev/null 2>&1
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Apptainer (singularity) command found, but 'apptainer --version' failed. Please check your installation."
    exit 1
  fi
}

# ViashApptainerRemoteImageCheck: check whether an Apptainer image is available
# on a remote (docker://, library://, shub://, oras://).
#
# $1                  : image URI (e.g. docker://ubuntu:20.04)
# exit code $?        : whether or not the image could be inspected
function ViashApptainerRemoteImageCheck {
  ViashDebug "Checking remote Apptainer image: $1"
  apptainer inspect "$1" > /dev/null 2> /dev/null
}

# ViashApptainerLocalImageCheck: check whether an Apptainer image is available locally
#
# $1                  : path to SIF file
# exit code $?        : whether or not the image file exists and is a valid SIF
function ViashApptainerLocalImageCheck {
  ViashDebug "Checking local Apptainer image: $1"
  if [ -f "$1" ]; then
    apptainer inspect "$1" > /dev/null 2> /dev/null
  else
    return 1
  fi
}

# ViashApptainerPull: pull an Apptainer image
#
# $1                  : image URI (e.g. docker://ubuntu:20.04)
# $2                  : target SIF file path
# exit code $?        : whether or not the pull was successful
function ViashApptainerPull {
  local image_uri="$1"
  local target_sif="$2"
  ViashNotice "Pulling Apptainer image '$image_uri' to '$target_sif'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    apptainer pull --force "$target_sif" "$image_uri" && return 0 || return 1
  else
    local save=$-; set +e
    apptainer pull --force "$target_sif" "$image_uri" > /dev/null 2>&1
    local out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull Apptainer image from '$image_uri'."
    fi
    return $out
  fi
}

# ViashApptainerBuild: build an Apptainer image from a definition file
# $1                               : target SIF file path
# $2                               : definition file path
# $...                             : additional arguments to pass to apptainer build (e.g. --fakeroot)
# $VIASH_META_TEMP_DIR             : temporary directory to store definition file & optional resources in
# $VIASH_META_NAME                 : name of the component
# $VIASH_META_RESOURCES_DIR        : directory containing the resources (build context)
# $VIASH_VERBOSITY                 : verbosity level
# exit code $?                     : whether or not the image was built successfully
function ViashApptainerBuild {
  local target_sif="$1"
  local definition_file_content_func="$2" # Function that prints definition file content
  shift 2
  local build_opts="$@" # e.g. --fakeroot

  local tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/apptainerbuild-$VIASH_META_NAME-XXXXXX")
  local definition_file_path="$tmpdir/apptainer.def"

  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # Store definition file
  eval "$definition_file_content_func" > "$definition_file_path"

  # Generate the build command
  # Apptainer uses the directory of the definition file as the build context.
  # We pass $VIASH_META_RESOURCES_DIR as the context if needed by definition file (e.g. %files section)
  # However, for simplicity, Viash usually copies resources into the script itself or makes them available.
  # The definition file generated by Viash typically doesn't rely on external files from context in %files.
  local apptainer_build_cmd="apptainer build --force $build_opts '$target_sif' '$definition_file_path'"

  ViashNotice "Building Apptainer image '$target_sif' with definition file"
  ViashInfo "$apptainer_build_cmd"
  local save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    eval $apptainer_build_cmd
  else
    eval $apptainer_build_cmd &> "$tmpdir/apptainer_build.log"
  fi

  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building Apptainer image '$target_sif'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Build log: --------------------------------"
      cat "$tmpdir/apptainer_build.log"
      ViashError "End of build log --------------------------"
    fi
    exit 1
  fi
}

# ViashApptainerSetup: create an Apptainer image, according to specified setup strategy
#
# $1          : target SIF image path
# $2          : source image URI (e.g. docker://ubuntu, or path to base .sif, or def file generator function name)
# $3          : apptainer setup strategy
# $4          : apptainer build options (e.g. --fakeroot)
# $5          : definition file content generator function (if strategy involves build)
# examples:
#   ViashApptainerSetup my_component.sif docker://ubuntu:20.04 alwaysbuild "--fakeroot" "ViashApptainerDefinitionFile \"$VIASH_ENGINE_ID\""
function ViashApptainerSetup {
  local target_sif="$1"
  local source_image_uri="$2" # Can be an image URI or a definition file content generator
  local setup_strategy="$3"
  local build_opts="$4"
  local def_file_func="$5" # Name of the function that generates the definition file

  if [ "$setup_strategy" == "alwaysbuild" ] || [ "$setup_strategy" == "build" ]; then
    ViashApptainerBuild "$target_sif" "$def_file_func" $build_opts
  elif [ "$setup_strategy" == "alwayspull" ] || [ "$setup_strategy" == "pull" ]; then
    ViashApptainerPull "$source_image_uri" "$target_sif"
  elif [ "$setup_strategy" == "alwayspullelsebuild" ] || [ "$setup_strategy" == "pullelsebuild" ]; then
    if ! ViashApptainerPull "$source_image_uri" "$target_sif"; then
      ViashApptainerBuild "$target_sif" "$def_file_func" $build_opts
    fi
  elif [[ "$setup_strategy" =~ ^ifneedbe ]]; then
    if ViashApptainerLocalImageCheck "$target_sif"; then
      ViashInfo "Apptainer image $target_sif already exists locally."
    elif [ "$setup_strategy" == "ifneedbebuild" ]; then
      ViashApptainerBuild "$target_sif" "$def_file_func" $build_opts
    elif [ "$setup_strategy" == "ifneedbepull" ]; then
      ViashApptainerPull "$source_image_uri" "$target_sif"
    elif [ "$setup_strategy" == "ifneedbepullelsebuild" ]; then
      if ! ViashApptainerPull "$source_image_uri" "$target_sif"; then
        ViashApptainerBuild "$target_sif" "$def_file_func" $build_opts
      fi
    else
      ViashError "Unrecognised Apptainer strategy: $setup_strategy"
      exit 1
    fi
  elif [ "$setup_strategy" == "donothing" ] || [ "$setup_strategy" == "meh" ]; then
    ViashNotice "Skipping Apptainer setup."
  else
    ViashError "Unrecognised Apptainer strategy: $setup_strategy"
    exit 1
  fi
}

# ViashApptainerCheckCommands: Check whether an apptainer container has the required commands
#
# $1                  : SIF image path
# $@                  : commands to verify being present
# examples:
#   ViashApptainerCheckCommands my_image.sif bash ps foo
function ViashApptainerCheckCommands {
  local image_sif="$1"
  shift 1
  local commands="$@"
  local save=$-; set +e
  local missing # mark 'missing' as local in advance
  missing=$(apptainer exec "$image_sif" sh -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  local outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
    ViashError "Apptainer image '$image_sif' does not contain command '$missing'."
    exit 1
  fi
}

######## End of helper functions for setting up Apptainer images for viash ########
