/*
 * Copyright (C) 2020  Data Intuitive
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.dataintuitive.viash.platforms

import com.dataintuitive.viash.Main
import com.dataintuitive.viash.functionality._
import com.dataintuitive.viash.functionality.resources._
import com.dataintuitive.viash.functionality.dataobjects._
import com.dataintuitive.viash.config.Version
import com.dataintuitive.viash.helpers.{Docker, Bash}
import com.dataintuitive.viash.helpers.Circe._
import com.dataintuitive.viash.wrapper.BashWrapper
import com.dataintuitive.viash.helpers.Format
import com.dataintuitive.viash.platforms.nextflow._
import io.circe.syntax._

/**
 * Next-gen Platform class for generating NextFlow (DSL2) modules.
 */
case class NextflowPlatformPoc(
  id: String = "nextflowpoc",
  oType: String = "nextflowpoc",
  directives: NextflowDirectives = NextflowDirectives(),
  simplifyInput: Boolean = false,
  simplifyOutput: Boolean = false
) extends Platform {


  def modifyFunctionality(functionality: Functionality): Functionality = {
    val mainFile = createMainNfFile(functionality)
    val nextflowConfigFile = createNextflowConfigFile(functionality)

    // remove main
    val otherResources = functionality.resources.tail

    functionality.copy(
      resources = mainFile :: nextflowConfigFile :: otherResources
    )
  }

  def renderNextflowConfig(functionality: Functionality): String = {
    val versStr = functionality.version.map(ver => s"\n  version = '$ver'").getOrElse("")
    val descStr = functionality.description.map(ver => s"\n  description = '$ver'").getOrElse("")
    val authStr = if (functionality.authors.isEmpty) "" else "\n  author = '" + functionality.authors.mkString(", ") + "'"
    s"""manifest {
    |  name = '${functionality.name}'
    |  mainScript = 'main.nf'$versStr$descStr$authStr
    |}
    |""".stripMargin
  }

  def createNextflowConfigFile(functionality: Functionality): Resource = {
    PlainFile(
      dest = Some("nextflow.config"),
      text = Some(renderNextflowConfig(functionality))
    )
  }

  // interpreted from BashWrapper
  def renderMainNf(functionality: Functionality): String = {
    /************************* HEADER *************************/
    // generate header
    val nav = BashWrapper.nameAndVersion(functionality)
    val nameAndVersionHeader =
      "/" + ("*" * (nav.length+10)) + "\n" +
        " *    " + nav + "    *\n" +
        " " + ("*" * (nav.length+10)) + "/"

    val authorHeader =
      if (functionality.authors.isEmpty) {
        ""
      } else {
        functionality.authors.map(_.toString).mkString("//\n// Component authors:\n// * ", "\n// * ", "\n")
      }

    // TODO: remove code duplication w/ BashWrapper
    // TODO: fix double spaces on newlines
    val header =
      s"""This wrapper script is auto-generated by ${Main.name} ${Main.version} and is thus a derivative work thereof. 
         |This software comes with ABSOLUTELY NO WARRANTY from Data Intuitive.
         |The component may contain files which fall under a different license. 
         |The authors of this component should specify the license in the header of such files, 
         |or include a separate license file detailing the licenses of all included files.""".stripMargin

    /************************* FUNCTIONALITY *************************/
    val argumentsStr = functionality.arguments.map{ arg => 
      // TODO: escape descr
      val descrStr = arg.description.map(des => s"\n      'description': '$des',").getOrElse("")
      // TODO: better type check of default values
      // TODO: _could_ write this a lot more elegantly
      val defaultStr = 
        if (arg.isInstanceOf[FileObject] && arg.direction == Output) {
          val mult = if (arg.multiple) "_*" else ""
          val reg = ".*\\.".r
          val ext = 
            if (arg.default.nonEmpty) {
              reg.replaceFirstIn(arg.default.head.toString, ".")
            } else if (arg.example.nonEmpty) {
              reg.replaceFirstIn(arg.example.head.toString, ".")
            } else {
              ""
            }
          s"\n      'default': '$$id.$$key.${arg.plainName}${mult}${ext}',"
        } else if (arg.default.isEmpty) {
          ""
        } else if (arg.multiple && (arg.isInstanceOf[StringObject] || arg.isInstanceOf[FileObject]) ) {
          s"\n      'default': ['${arg.default.toList.mkString("', '")}'],"
        } else if (arg.multiple) {
          s"\n      'default': [${arg.default.toList.mkString(", ")}],"
        } else if (arg.isInstanceOf[StringObject] || arg.isInstanceOf[FileObject]) {
          s"\n      'default': '${arg.default.head}',"
        } else {
          s"\n      'default': ${arg.default.head},"
        }
      val exampleStr = 
        if (arg.example.isEmpty) {
          ""
        } else if (arg.multiple && (arg.isInstanceOf[StringObject] || arg.isInstanceOf[FileObject]) ) {
          s"\n      'example': ['${arg.example.toList.mkString("', '")}'],"
        } else if (arg.multiple) {
          s"\n      'example': [${arg.example.toList.mkString(", ")}],"
        } else if (arg.isInstanceOf[StringObject] || arg.isInstanceOf[FileObject]) {
          s"\n      'example': '${arg.example.head}',"
        } else {
          s"\n      'example': ${arg.example.head},"
        }

      if (arg.oType == "file" && arg.direction == Output) {      
        "'default': '$id.$key.output_multi_*.txt',"
      }
      s"""
         |    [
         |      'name': '${arg.plainName}',
         |      'required': ${arg.required},
         |      'type': '${arg.oType}',
         |      'direction': '${arg.direction}',${descrStr}${defaultStr}${exampleStr}
         |      'multiple': ${arg.multiple}
         |    ]""".stripMargin
    }

    /************************* HELP *************************/

    /************************* SCRIPT *************************/
    val executionCode = functionality.mainScript match {
      // if mainResource is empty (shouldn't be the case)
      case None => ""

      // if mainResource is simply an executable
      case Some(e: Executable) => //" " + e.path.get + " $VIASH_EXECUTABLE_ARGS"
        throw new NotImplementedError("Running executables through a NextflowPlatform is not yet implemented. Create a support ticket to request this functionality if necessary.")

      // if mainResource is a script
      case Some(res) =>
        val code = res.readWithPlaceholder(functionality).get
        val escapedCode = BashWrapper.escapeViash(code).replace("\\", "\\\\")

        // IMPORTANT! difference between code below and BashWrapper:
        // script is stored as `.viash_script.sh`.
        val scriptPath = "$tempscript"

        s"""
          |set -e
          |tempscript=".viash_script.sh"
          |cat > "$scriptPath" << VIASHMAIN
          |$escapedCode
          |VIASHMAIN
          |${res.meta.command(scriptPath)}
          |""".stripMargin
    }

    /************************* MAIN.NF *************************/
    val tripQuo = """""""""
    s"""$nameAndVersionHeader
      |
      |// ${Format.wordWrap(header, 78).mkString("\n// ")}
      |$authorHeader
      |
      |nextflow.enable.dsl=2
      |
      |
      |import groovy.json.JsonSlurper
      |def jsonSlurper = new JsonSlurper()
      |
      |
      |// DEFINE CUSTOM CODE
      |
      |// functionality metadata
      |thisFunctionality = [
      |  'name': '${functionality.name}',
      |  'arguments': [${argumentsStr.mkString(",")}
      |  ]
      |]
      |
      |thisHelpMessage = "foo"    // TODO: fill in by functionality
      |
      |thisScript = '''$executionCode'''.replace('\\\\', '\\\\\\\\').replace('$$', '\\\\$$')
      |
      |thisDefaultDirectives = jsonSlurper.parseText($tripQuo${directives.asJson}$tripQuo)
      |
      |thisDefaultProcessArgs = [
      |  key: thisFunctionality.name,
      |  args: [:],
      |  // whether or not to accept [id, Path, ...] inputs instead of [id, [input: Path], ...]
      |  simplifyInput: $simplifyInput,
      |  // if output is a single file, will output [id, Path, ...] instead of [id, [output: Path], ...]
      |  simplifyOutput: $simplifyOutput,
      |  // identity operator: { it -> it }
      |  map: null,
      |  // identity operator: { it -> it[0] }
      |  mapId: null,
      |  // identity operator: { it -> it[1] }
      |  mapData: null,
      |  // usage: [ "new_key": "old_key" ]
      |  renameKeys: null
      |]
      |
      |// END CUSTOM CODE
      |
      |""".stripMargin + NextflowHelper.code
  }

  def createMainNfFile(functionality: Functionality): Resource = {
    PlainFile(
      dest = Some("main.nf"),
      text = Some(renderMainNf(functionality))
    )
  }
}

// vim: tabstop=2:softtabstop=2:shiftwidth=2:expandtab
